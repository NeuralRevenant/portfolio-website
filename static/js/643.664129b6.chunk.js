"use strict";(self.webpackChunkportfolio_website=self.webpackChunkportfolio_website||[]).push([[643],{300:(e,a,n)=>{n.r(a),n.d(a,{default:()=>h});var i=n(43),t=n(910),o=n(929),s=n(216);const r=n.p+"static/media/img1.4cf084f6432e26bc0e9b.jpg",c=n.p+"static/media/swiftnet.f0e182e76c7a3fcdb52c.webp",l=n.p+"static/media/img3.e596c08dfc8d6ace4c69.jpg",d=n.p+"static/media/calc.ceffebe74d6ec02c3aa5.webp",g=n.p+"static/media/globe.4d907b294dfd7dffcedd.webp",m=n.p+"static/media/music.df8b66ea5c7f8ccb8c76.webp",u=n.p+"static/media/planpulse.8edfb9ac68e3b6bf1f2b.webp";var p=n(579);const h=()=>{const e=(0,s.Zp)(),a=(0,i.useRef)(null),n=()=>{e("/")};(0,i.useEffect)((()=>{a.current&&a.current.setAttribute("inert","true")}),[]);const h=[{title:"Medical Chatbot",logo:"medicalChatbotLogo",description:["Developed a conversational AI assistant that provides accurate, real-time medical query responses leveraging the Semantic Query Engine.","Integrates retrieval-augmented generation (RAG) with LLM-based reasoning to generate responses based on relevant clinical documents and medical literature.","Engineered using FastAPI, Next.js, and PostgreSQL for secure, scalable deployment and real-time user interactions.","Supports natural language querying and advanced filtering mechanisms for accurate fast information/document retrievals."],technologies:["Python","Next.js","FastAPI","PostgreSQL","PyTorch","Transformers (Hugging Face)","Docker","REST","OpenSearch","Redis","BlueHiveAI"]},{title:"Semantic Query Engine",logo:"semanticQueryEngineLogo",description:["Designed and implemented a high-speed, context-aware retrieval system for medical and EHR documents using RAG, NLP, and LLMs.","Built using transformers like DistilBERT for query intent classification and OpenSearch for ANN-based vector search + hybrid search.","Integrated Redis caching to enable low-latency responses and FastAPI RESTful APIs for real-time query processing.","Optimized system for high accuracy and near real-time query answering using intelligent embeddings and hybrid search techniques."],technologies:["Python","PyTorch","Transformers (Hugging Face)","embedding models and LLMs (Ollama and BlueHiveAI)","OpenSearch","Redis","FastAPI","NumPy","Scikit-learn","Docker"]},{title:"Lexi-Phylax",logo:r,description:["Initially developed an AI-based hate speech classifier utilizing a BERT-based transformer model from Hugging Face, trained on custom datasets and deployed for inference.","Currently building a custom transformer model with ~400M parameters, fine-tuned specifically for nuanced hate speech classification.","Achieved an incredible 98% accuracy on datasets (larger datasets in progress) in detecting and categorizing hate speech in test data."],technologies:["Python","PyTorch","Transformers (Hugging Face)","Custom Transformer Architecture","FastText","Scikit-learn","Seaborn","Matplotlib","Kaggle"]},{title:"PlanPulse",logo:u,description:["Built a collaborative task management system enabling users to create boards, manage tasks, and collaborate efficiently.","Designed a layered architecture with modules for user, board, and task management, ensuring modularity and scalability.","Implemented JWT-based secure authentication for enhanced security and performance.","Backend hosted on Google Cloud Run with Docker containerization and MongoDB for data storage."],technologies:["React","Spring Boot","MongoDB","Redis","Google Cloud Run","Docker","JWT","Gradle","Postman"]},{title:"SwiftNet",logo:c,description:["Designed a C++ networking library optimized for low-latency, high-throughput applications.","Incorporated io_uring and kqueue-based event loops for efficient, asynchronous I/O.","Leveraged modern C++ coroutines to build virtual thread task offloading, improving CPU utilization and request handling.","This library/framework is designed keeping in mind the good features from both the Node.js and the Spring Boot frameworks where one offers asynchronous request handling and the other parallel programming."],technologies:["Modern C++","Linux System Programming","Socket Programming","High-Performance Computing","Asynchronous I/O"]},{title:"FlashPoint",logo:l,description:["Created a high-performance in-memory key-value store focused on delivering low-latency responses.","Implemented event loop-based networking with I/O multiplexing for efficient network management.","Utilized event-driven asynchronous I/O and concurrent connection management.","Built a lightweight thread pool to handle computationally intensive tasks efficiently.","Integrated efficient resource management and pipelined request/response protocol."],technologies:["C","C++","Data Structures and Algorithms","Socket Programming","Linux System Programming","High-Performance Computing"]},{title:"Math Evaluator",logo:d,description:["Developed a mathematical expression evaluator capable of parsing and evaluating complex expressions.","Also supports operations like addition, subtraction, and multiplication on matrices.","Handles numbers and operations on numbers of any size."],technologies:["C++","Data Structures and Algorithms"]},{title:"Sambhashan",logo:g,description:["Built a social networking and chat web application inspired by Facebook.","Utilized Node.js, EJS, and MongoDB following the MVC design pattern for a structured, maintainable codebase.","Implemented features like authentication, session management, messaging, and multimedia sharing.","Included functionalities such as image/video uploads, friend requests, and group sharing."],technologies:["Node.js","MongoDB","RESTful APIs","EJS","MVC Pattern"]},{title:"Music Player",logo:m,description:["Developed a music player website with comprehensive user authentication.","Implemented audio/video upload and download capabilities.","Added search filters and personalized playlist options.","Included features like custom song repetition mode for enhanced user experience."],technologies:["EJS","Node.js","MongoDB","MySQL"]}];return(0,p.jsx)("section",{className:"projects-section",children:(0,p.jsxs)("div",{className:"projects-modal",children:[(0,p.jsx)(t.g,{icon:o.Jyw,className:"close-icon",onClick:n,"aria-label":"Close Projects Section",tabIndex:"0",ref:a,role:"button","aria-hidden":"false",onKeyUp:e=>{"Enter"!==e.key&&" "!==e.key||n()}}),(0,p.jsxs)("div",{className:"modal-content",children:[(0,p.jsx)("h2",{className:"major-heading",children:"\ud83d\ude80 Personal Projects"}),h.map(((e,a)=>(0,p.jsxs)("div",{className:"project-item",children:[(0,p.jsx)("img",{src:e.logo,alt:`${e.title} Logo`,className:"project-logo"}),(0,p.jsxs)("div",{className:"project-description",children:[(0,p.jsxs)("h3",{children:[(0,p.jsx)("span",{className:"icon",children:(0,p.jsx)(t.g,{icon:o.jTw})}),e.title]}),(0,p.jsx)("ul",{className:"description-list",children:e.description.map(((e,a)=>(0,p.jsx)("li",{children:e},a)))}),(0,p.jsxs)("p",{className:"technologies",children:[(0,p.jsx)("strong",{children:"Technologies:"})," ",e.technologies.join(", ")]})]})]},a)))]})]})})}}}]);
//# sourceMappingURL=643.664129b6.chunk.js.map