{"version":3,"file":"static/js/90.823db316.chunk.js","mappings":"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","sources":["components/Projects/Projects.jsx"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faXmark, faCode } from \"@fortawesome/free-solid-svg-icons\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Projects.css\";\n\nimport lexiPhylaxLogo from \"../../assets/images/img1.jpg\";\nimport swiftNetLogo from \"../../assets/images/swiftnet.webp\";\nimport flashPointLogo from \"../../assets/images/img3.jpg\";\nimport mathEvaluatorLogo from \"../../assets/images/calc.webp\";\nimport sambhashanLogo from \"../../assets/images/globe.webp\";\nimport musicPlayerLogo from \"../../assets/images/music.webp\";\nimport planPulseLogo from \"../../assets/images/planpulse.webp\";\nimport semanticQueryEngineLogo from \"../../assets/images/semantic-query-engine.webp\";\nimport medicalChatbotLogo from \"../../assets/images/medical-chatbot.webp\";\n\nconst Projects = () => {\n  const navigate = useNavigate();\n  const closeIconRef = useRef(null);\n\n  const handleClose = () => {\n    navigate(\"/\");\n  };\n\n  useEffect(() => {\n    if (closeIconRef.current) {\n      closeIconRef.current.setAttribute(\"inert\", \"true\");\n    }\n  }, []);\n\n  const projectsData = [\n    {\n      title: \"Medical Chatbot\",\n      logo: medicalChatbotLogo,\n      description: [\n        \"Developed a conversational AI assistant that provides accurate, real-time medical query responses leveraging the Semantic Query Engine.\",\n        \"Integrates retrieval-augmented generation (RAG) with LLM-based reasoning to generate responses based on relevant clinical documents and medical literature.\",\n        \"Engineered using FastAPI, Next.js, and PostgreSQL for secure, scalable deployment and real-time user interactions.\",\n        \"Supports natural language querying and advanced filtering mechanisms for accurate fast information/document retrievals.\",\n      ],\n      technologies: [\n        \"Python\",\n        \"Next.js\",\n        \"FastAPI\",\n        \"PostgreSQL\",\n        \"PyTorch\",\n        \"Transformers (Hugging Face)\",\n        \"Docker\",\n        \"REST\",\n        \"OpenSearch\",\n        \"Redis\",\n        \"BlueHiveAI\",\n      ],\n    },\n    {\n      title: \"Semantic Query Engine\",\n      logo: semanticQueryEngineLogo,\n      description: [\n        \"Designed and implemented a high-speed, context-aware retrieval system for medical and EHR documents using RAG, NLP, and LLMs.\",\n        \"Built using transformers like DistilBERT for query intent classification and OpenSearch for ANN-based vector search + hybrid search.\",\n        \"Integrated Redis caching to enable low-latency responses and FastAPI RESTful APIs for real-time query processing.\",\n        \"Optimized system for high accuracy and near real-time query answering using intelligent embeddings and hybrid search techniques.\",\n      ],\n      technologies: [\n        \"Python\",\n        \"PyTorch\",\n        \"Transformers (Hugging Face)\",\n        \"embedding models and LLMs (Ollama and BlueHiveAI)\",\n        \"OpenSearch\",\n        \"Redis\",\n        \"FastAPI\",\n        \"NumPy\",\n        \"Scikit-learn\",\n        \"Docker\",\n      ],\n    },\n    {\n      title: \"Lexi-Phylax\",\n      logo: lexiPhylaxLogo,\n      description: [\n        \"Initially developed an AI-based hate speech classifier utilizing a BERT-based transformer model from Hugging Face, trained on custom datasets and deployed for inference.\",\n        \"Currently building a custom transformer model with ~400M parameters, fine-tuned specifically for nuanced hate speech classification.\",\n        \"Achieved an incredible 98% accuracy on datasets (larger datasets in progress) in detecting and categorizing hate speech in test data.\",\n      ],\n      technologies: [\n        \"Python\",\n        \"PyTorch\",\n        \"Transformers (Hugging Face)\",\n        \"Custom Transformer Architecture\",\n        \"FastText\",\n        \"Scikit-learn\",\n        \"Seaborn\",\n        \"Matplotlib\",\n        \"Kaggle\",\n      ],\n    },\n    {\n      title: \"PlanPulse\",\n      logo: planPulseLogo,\n      description: [\n        \"Built a collaborative task management system enabling users to create boards, manage tasks, and collaborate efficiently.\",\n        \"Designed a layered architecture with modules for user, board, and task management, ensuring modularity and scalability.\",\n        \"Implemented JWT-based secure authentication for enhanced security and performance.\",\n        \"Backend hosted on Google Cloud Run with Docker containerization and MongoDB for data storage.\",\n      ],\n      technologies: [\n        \"React\",\n        \"Spring Boot\",\n        \"MongoDB\",\n        \"Redis\",\n        \"Google Cloud Run\",\n        \"Docker\",\n        \"JWT\",\n        \"Gradle\",\n        \"Postman\",\n      ],\n    },\n    {\n      title: \"SwiftNet\",\n      logo: swiftNetLogo,\n      description: [\n        \"Designed a C++ networking library optimized for low-latency, high-throughput applications.\",\n        \"Incorporated io_uring and kqueue-based event loops for efficient, asynchronous I/O.\",\n        \"Leveraged modern C++ coroutines to build virtual thread task offloading, improving CPU utilization and request handling.\",\n        \"This library/framework is designed keeping in mind the good features from both the Node.js and the Spring Boot frameworks where one offers asynchronous request handling and the other parallel programming.\",\n      ],\n      technologies: [\n        \"Modern C++\",\n        \"Linux System Programming\",\n        \"Socket Programming\",\n        \"High-Performance Computing\",\n        \"Asynchronous I/O\",\n      ],\n    },\n    {\n      title: \"FlashPoint\",\n      logo: flashPointLogo,\n      description: [\n        \"Created a high-performance in-memory key-value store focused on delivering low-latency responses.\",\n        \"Implemented event loop-based networking with I/O multiplexing for efficient network management.\",\n        \"Utilized event-driven asynchronous I/O and concurrent connection management.\",\n        \"Built a lightweight thread pool to handle computationally intensive tasks efficiently.\",\n        \"Integrated efficient resource management and pipelined request/response protocol.\",\n      ],\n      technologies: [\n        \"C\",\n        \"C++\",\n        \"Data Structures and Algorithms\",\n        \"Socket Programming\",\n        \"Linux System Programming\",\n        \"High-Performance Computing\",\n      ],\n    },\n    {\n      title: \"Math Evaluator\",\n      logo: mathEvaluatorLogo,\n      description: [\n        \"Developed a mathematical expression evaluator capable of parsing and evaluating complex expressions.\",\n        \"Also supports operations like addition, subtraction, and multiplication on matrices.\",\n        \"Handles numbers and operations on numbers of any size.\",\n      ],\n      technologies: [\"C++\", \"Data Structures and Algorithms\"],\n    },\n    {\n      title: \"Sambhashan\",\n      logo: sambhashanLogo,\n      description: [\n        \"Built a social networking and chat web application inspired by Facebook.\",\n        \"Utilized Node.js, EJS, and MongoDB following the MVC design pattern for a structured, maintainable codebase.\",\n        \"Implemented features like authentication, session management, messaging, and multimedia sharing.\",\n        \"Included functionalities such as image/video uploads, friend requests, and group sharing.\",\n      ],\n      technologies: [\n        \"Node.js\",\n        \"MongoDB\",\n        \"RESTful APIs\",\n        \"EJS\",\n        \"MVC Pattern\",\n      ],\n    },\n    {\n      title: \"Music Player\",\n      logo: musicPlayerLogo,\n      description: [\n        \"Developed a music player website with comprehensive user authentication.\",\n        \"Implemented audio/video upload and download capabilities.\",\n        \"Added search filters and personalized playlist options.\",\n        \"Included features like custom song repetition mode for enhanced user experience.\",\n      ],\n      technologies: [\"EJS\", \"Node.js\", \"MongoDB\", \"MySQL\"],\n    },\n  ];\n\n  return (\n    <section className=\"projects-section\">\n      <div className=\"projects-modal\">\n        <FontAwesomeIcon\n          icon={faXmark}\n          className=\"close-icon\"\n          onClick={handleClose}\n          aria-label=\"Close Projects Section\"\n          tabIndex=\"0\"\n          ref={closeIconRef}\n          role=\"button\"\n          aria-hidden=\"false\"\n          onKeyUp={(e) => {\n            if (e.key === \"Enter\" || e.key === \" \") handleClose();\n          }}\n        />\n\n        <div className=\"modal-content\">\n          <h2 className=\"major-heading\">🚀 Personal Projects</h2>\n\n          {projectsData.map((project, index) => (\n            <div className=\"project-item\" key={index}>\n              <img\n                src={project.logo}\n                alt={`${project.title} Logo`}\n                className=\"project-logo\"\n              />\n\n              <div className=\"project-description\">\n                <h3>\n                  <span className=\"icon\">\n                    <FontAwesomeIcon icon={faCode} />\n                  </span>\n                  {project.title}\n                </h3>\n                <ul className=\"description-list\">\n                  {project.description.map((point, idx) => (\n                    <li key={idx}>{point}</li>\n                  ))}\n                </ul>\n                <p className=\"technologies\">\n                  <strong>Technologies:</strong>{\" \"}\n                  {project.technologies.join(\", \")}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Projects;\n"],"names":["Projects","navigate","useNavigate","closeIconRef","useRef","handleClose","useEffect","current","setAttribute","projectsData","title","logo","medicalChatbotLogo","description","technologies","semanticQueryEngineLogo","lexiPhylaxLogo","planPulseLogo","swiftNetLogo","flashPointLogo","mathEvaluatorLogo","sambhashanLogo","musicPlayerLogo","_jsx","className","children","_jsxs","FontAwesomeIcon","icon","faXmark","onClick","tabIndex","ref","role","onKeyUp","e","key","map","project","index","src","alt","faCode","point","idx","join"],"sourceRoot":""}